complex backend 01 ( i will make it easy)


           1) about user 
           2) model can be created by any method thinking about future and what kind of application is required\
    


        handelling professionally files folders storing images

    # we use  third party services to store images 
     37
     we store photo temporarily  in server
    

    // start of main note 

1) we use blank folder at the initial stage of writing code to maintain folder stucture.
2) git doesnt track empty folder thats why we use gitkeep to track those folder
3) we use .gitignore to keep those whiles which we dont need to push in git ( storing secret and sensitive files)
4)we use gitigonre generator to generate ac to code
5) we create .env file to keep secret data and .env.sample to push this demo data in github 
6) we create index.js constants.js app.js(file is blank right now so i dont know why they are  created )
7) we did "type": "module" in package.json to maintain consistency while importing files
8) we installed nodemon for server restarting which is used while development and "dev" : "nodemon src/index.js"
9) Dependencies vs  devDependencies


##### production grade folder structure ###

inside src

1) controllers -- to handle all the controllers
2) db -- to write the code for database connection
3) middlewares -- to write all the middlewares
4) models -- to write all the models
5) routes -- to write all the routes using express
6) utils --- to write all the repeating functionality 


// plugins used 
   1) nodemon -- npm i -D nodemon
   2) prettier -- (used to work in team ( increase in conflicts) ) npm i -D prettier and we also have to create file by our selve (.prettierrc)
   3) prettierignore -- we dont want to apply the prettier setting to our other files like env so we put those files into prettier ignore
   4) mongoose
   5)express
   6) dot env




video 2 ( production grade ) (Database connection (problems issues , how to handle , ways to connect database ))

using mongodb atlas to store our data in cloud database
    * we need 3 major things from mongodb atlas 
    1) id pass 2) ip 3)url

    * we dont need / at the end of DB-URI

    * using 1st approach to connect with db in index file with async await and try catch for error handelling

    # 2nd approach
    


IMPORTANT NOTES 
        (DATABASE)
  * wrap in try catch because error can be produced
  * Database is always in another continent so use async await



IMPORTANT CONCEPTS
;(async ()=>{})() using iife
* "dev": "nodemon -r dotenv/config --experimental-json-modules src/index.js" we wrote expreimental feature